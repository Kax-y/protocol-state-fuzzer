@startuml Instantiating ParameterizedSymbol when needed

note top of ParameterizedSymbol : Note that this is from RALib.
abstract class ParameterizedSymbol {
    name: String
    ptypes: DataType[]

    ParameterizedSymbol(name: String, ptypes: DataType...): void
    hashCode(): int
    equals(obj: Object): boolean
    toString(): String
    getName(): String
    getArity(): int
    getPtypes(): DataType[]
}

class OutputSymbol extends ParameterizedSymbol {
    OutputSymbol(name: String, ptypes: DataType...)
    toString(): String
}

class InputSymbol extends ParameterizedSymbol {
    InputSymbol(name: String, ptypes: DataType...)
    toString(): String
}

abstract class AbstractSymbol {
    name: String
    isInput: boolean
    
    AbstractSymbol(isInput: boolean): void
    AbstractSymbol(name: string, isInput: boolean): void
    getName(): String
    setName(name: String): void
    getIsInput(): boolean
    inputDistinguishingName(): String
    toString(): String
}

class ParameterizedAbstractInput extends AbstractInput {
    ptypes: DataType[]

    ParameterizedAbstractInput(name: String, ptypes: DataType...): void
    toParameterizedSymbol(): ParameterizedSymbol
}

class ParameterizedAbstractOutput extends AbstractOutput {
    ParameterizedSymbolToAbstractOutput(pSymbol: ParameterizedSymbol): AbstractOutput
}

abstract class AbstractInput extends AbstractSymbol {
    extendedWait: Long

    AbstractInput(): void
    AbstractInput(name: String): void
    getExtendedWait(): Long
    setExtendedWait(extendedWait: Long): void
    getPreferredMapper(sulConfig: SulConfig): Mapper
    isEnabled(context: ExecutionContext): boolean
    preSendUpdate(context: ExecutionContext): void
    generateProtocolMessage(context: ExecutionContext): \nProtocolMessage
    postSendUpdate(context: ExecutionContext): void
    postReceiveUpdate(output: AbstractOutput, \nabstractOutputChecker: AbstractOutputChecker, context: \nExecutionContext): void
    getInputType(): Enum<?>
}

abstract class AbstractOutput extends AbstractSymbol {
    MESSAGE_SEPARATOR: String
    REPEATING_INDICATOR: String
    TIMEOUT: String
    UNKNOWN_MESSAGE: String
    SOCKET_CLOSED: String
    DISABLED: String
    specialOutputsMap: Map<String, AbstractOutput>
    alive: boolean
    messages: List<ProtocolMessage>

    timeout(): AbstractOutput
    unknown(): AbstractOutput
    socketClosed(): AbstractOutput
    disabled(): AbstractOutput
    getSpecialOutput(symbolName: String): AbstractOutput
    AbstractOutput(): void
    AbstractOutput(name: String): void
    AbstractOutput(name: String, messages: List<ProtocolMessage>)
    isComposite(): boolean
    isAtomic(): boolean
    isRepeating(): boolean
    getRepeatedOutput(): AbstractOutput
    isTimeout(): boolean
    isSocketClosed(): boolean
    isDisabled(): boolean
    isRecordResponse(): boolean
    hasMessages(): boolean
    getAtomicOutputs(): List<AbstractOutput>
    getAtomicOutputs(unrollRepeating: int): List<AbstractOutput>
    getAtomicAbstractionStrings(): List<String>
    getAtomicAbstractionStrings(unrollRepeating: int): List<String>
    toDetailedString(): String
    buildContentInfo(): String
    getMessages(): List<ProtocolMessage>
    isAlive(): boolean
    setAlive(): void
    equals(o: Object): boolean
    hashCode(): int
}

interface AlphabetBuilder {
    DEFAULT_ALPHABET_NO_EXTENSION: String
    
    build(alphabetProvider: AlphabetProvider): Alphabet<AbstractInput>
    getAlphabetFileInputStream(alphabetProvider: AlphabetProvider): InputStream
    getAlphabetFileExtension(): String
    exportAlphabetToFile(outputFileName: String, alphabet: Alphabet<AbstractInput>): void
}

AlphabetBuilder <-- AbstractInput
@enduml