@startuml PSF

interface StateFuzzer {
    LEARNED_MODEL_FILENAME: String
    STATISTICS_FILENAME: String
    MAPPER_CONNECTION_CONFIG_FILENAME: String
    ALPHABET_FILENAME_NO_EXTENSION: String
    ERROR_FILENAME: String
    LEARNED_MODEL_FILENAME: String

    startFuzzing(): LearnerResult
}

class StateFuzzerRA implements StateFuzzer {
    LOGGER: Logger

    startFuzzing(): LearnerResult
    
}

class StateFuzzerStandard implements StateFuzzer {
    LOGGER: Logger
    ALPHABET_FILENAME: String
    stateFuzzerComposer: StateFuzzerComposer
    alphabet: Alphabet<AbstractInput>
    outputDir: File
    cleanupTasks: CleanupTasks
    stateFuzzerEnabler: StateFuzzerEnabler

    StateFuzzerStandard(stateFuzzerComposer: StateFuzzerComposer)
    startFuzzing(): LearnerResult
    inferStateMachine(): LearnerResult
    copyInputsToOutputDir(outputDir: File): void
    writeToFile(inputStream: InputStream, outputFile: File): void
    roundLimitToInt(roundLimit: Integer): int
    exportHypothesis(hypothesis: StateMachine, destination: File): void
}

interface StateFuzzerComposer {
    NON_DET_FILENAME: String
    QUERY_FILENAME: String

    getStatisticsTracker: StatisticsTracker
    getLearner(): PSFLearner
    getEquivalenceOracle(): EquivalenceOracle<AbstractStateMachine, AbstractInput, \nWord<AbstractOutput>>
    getAlphabet(): Alphabet<AbstractInput>
    getAlphabetFileInputStream(): InputStream
    getAlphabetFileExtension(): String
    getStateFuzzerEnabler(): StateFuzzerEnabler
    getOutputDir(): File
    getCleanupTasks(): CleanupTasks
}

class CommandLineParser {
    LOGGER: Logger
    CMD_STATE_FUZZER_CLIENT: String
    CMD_STATE_FUZZER_SERVER: String
    ARGS_FILE: String
    programName: String
    stateFuzzerConfigBuilder: StateFuzzerConfigBuilder
    stateFuzzerBuilder: StateFuzzerBuilder
    testRunnerBuilder: TestRunnerBuilder
    timingProbeBuilder: TimingProbeBuilder
    externalParentLoggers: String[]

    getBasePackageName(): String
    CommandLineParser(stateFuzzerConfigBuilder: \nStateFuzzerConfigBuilder, stateFuzzerBuilder: StateFuzzerBuilder,\ntestRunnerBuilder: TestRunnerBuilder, timingProbeBuilder: \nTimingProbeBuilder): void
    setProgramName(programName: String): void
    setExternalParentLoggers(externalParentLoggers: String[]): void
    parse(args: String[], exportToPDF: boolean, consumers: \nList<Consumer<LearnerResult>>): List<LearnerResult>
    parse(args: String[], exportToPDF: boolean): List<LearnerResult>
    parse(args: String[]): List<LearnerResult>
    parseAndExecuteCommand(args: String[]): LearnerResult
    parseCommand(args: String[]): ParseResult
    executeCommand(parseResult: ParseResult): LearnerResult
    buildCommander(parseOnlyDynamicParameters: boolean, \nstateFuzzerClientConfig: StateFuzzerClientConfig, \nstateFuzzerServerConfig: StateFuzzerServerConfig): JCommander
    updateLoggingLevel(externalParentLoggers: String[], level: Level)
    prepareOutputDir(args: String[], outDir: String): void
    copyArgsToOutDir(args: String[], outDir: String): void
    ParseResult: ParseResult
}

class ParseResult {
    args: String[]
    commander: JCommander

    ParseResult(args: String[], commander: JCommander): void
    getArgs(): String[]
    getCommander(): JCommander
    isValid(): boolean
    getObjectFromParsedCommand(): Object
    getObjectFromParsedCommand(index: int): Object
}

abstract class AbstractStateMachine {
    LOGGER: Logger
    -alphabet: Alphabet<?>
    +getAlphabet(): Alphabet<?>
    +export(graphFile: File): void
    +Copy(): AbstractStateMachine
    toString(): String
}

class StateMachine extends AbstractStateMachine {
    LOGGER: Logger
    mealyMachine: MealyMachine<?, AbstractInput, ?, AbstractOutput>
    alphabet: Alphabet<AbstractInput>

    StateMachine(mealyMachine: MealyMachine<?, AbstractInput, ?, \nAbstractOutput>, alphabet: Alphabet<AbstractInput>)
    getMealyMachine(): MealyMachine<?, AbstractInput, ?, \nAbstractOutput>
    getAlphabet(): Alphabet<AbstractInput>
    export(graphFile: File): void
    copy(): StateMachine
    toString(): String
}

class RAStateMachine extends AbstractStateMachine {
    -alphabet: Alphabet<ParameterizedSymbol>
    +getAlphabet(): Alphabet<ParameterizedSymbol>
    export(graphFile: File): void
    copy(): RAStateMachine
    toString(): String
    RAStateMachine(automata:\nRegisterAutomata, alphabet: Alphabet<ParameterizedSymbol>)
    getRAStateMachine(): RegisterAutomata
}

class LearnerResult {
    hypotheses: List<StateMachine>
    learnedModel: StateMachine
    learnedModelFile: File
    statistics: Statistics
    stateFuzzerEnabler: StateFuzzerEnabler

    LearnerResult(): void
    toEmpty(): LearnerResult
    isEmpty(): boolean
    toNormal(): LearnerResult
    addHypothesis(hypothesis: StateMachine): void
    getHypotheses(): List<StateMachine>
    getLearnedModel(): StateMachine
    setLearnedModel(learnedModel: StateMachine): void
    getLearnedModelFile(): File
    setLearnedModelFile(learnedModelFile: File): void
    getStatistics(): Statistics
    setStatistics(statistics: Statistics): void
    getStateFuzzerEnabler(): StateFuzzerEnabler
    setStateFuzzerEnabler(stateFuzzerEnabler: StateFuzzerEnabler): void
}

interface StateFuzzerEnabler {
    getLearnerConfig(): LearnerConfig
    getSulConfig(): SulConfig
    isFuzzingClient(): boolean
    getOutputDir(): String
}

interface StateFuzzerBuilder {
    build(stateFuzzerEnabler: StateFuzzerEnabler): StateFuzzer
}

interface PSFLearner {
    -learningAlgorithm: ?

    +startLearning(): void
    +getHypothesis(): AbstractStateMachine
    +refineHypothesis(DefaultQuery<?,?>): boolean
}

class RALearner implements PSFLearner {
    +startLearning(): void
    +getHypothesis(): RAStateMachine
    +refineHypothesis(DefaultQuery<PSymbolInstance, Boolean>): boolean 
}

class MealyLearner implements PSFLearner{
    +startLearning(): void
    +getHypothesis(): StateMachine
    +refineHypothesis(counterExample:\nDefaultQuery<AbstractInput,Word<AbstractOutput>>): boolean
}

CommandLineParser *-- ParseResult : contains
CommandLineParser <-- StateFuzzerBuilder
StateFuzzerBuilder <-- StateFuzzerEnabler
StateFuzzerBuilder <-- StateFuzzer
StateFuzzer <-- LearnerResult
LearnerResult <-- AbstractStateMachine

StateFuzzerStandard <-- StateFuzzerComposer
StateFuzzerComposer <-- PSFLearner

@enduml